# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build all

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PREFER_STATIC_LINKING: ON
  LLVM_MINGW_VERSION: 20250826
  

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Windows target
          - target: i686-w64-mingw32
            libc: ucrt
            artifact_name: mingw32-i686-ucrt
            arch: i686
          - target: x86_64-w64-mingw32
            libc: ucrt
            artifact_name: mingw32-x86_64-ucrt
            arch: x86_64
          - target: i686-w64-mingw32
            libc: msvcrt
            artifact_name: mingw32-i686-msvcrt
            arch: i686
          - target: x86_64-w64-mingw32
            libc: msvcrt
            artifact_name: mingw32-x86_64-msvcrt
            arch: x86_64
            
          # Linux target
          - target: x86_64-linux-musl
            libc: musl
            artifact_name: linux-x86_64-musl
            arch: x86_64
          - target: aarch64-linux-musl
            libc: musl
            artifact_name: linux-aarch64-musl
            arch: aarch64

          # Android target
          - target: aarch64-linux-android
            libc: bionic
            artifact_name: android-aarch64
            arch: aarch64
          - target: armv7a-linux-androideabi
            libc: bionic
            artifact_name: android-armv7a
            arch: armv7a
          - target: i686-linux-android
            libc: bionic
            artifact_name: android-i686
            arch: i686
          - target: x86_64-linux-android
            libc: bionic
            artifact_name: android-x86_64
            arch: x86_64

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Cache LLVM-Mingw
      if: contains(matrix.target, 'mingw32')
      uses: actions/cache@v3
      id: cache-llvm-mingw
      with:
        path: ${{ runner.tool_cache }}/llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}
        key: llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}-${{ runner.os }}
        restore-keys: |
          llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}-${{ runner.os }}
          llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-
    
    - name: Download and extract LLVM-Mingw
      if: steps.cache-llvm-mingw.outputs.cache-hit != 'true' && contains(matrix.target, 'mingw32')
      run: |
        url="https://github.com/mstorsjo/llvm-mingw/releases/download/${{env.LLVM_MINGW_VERSION}}/llvm-mingw-${{env.LLVM_MINGW_VERSION}}-${{matrix.libc}}-ubuntu-22.04-x86_64.tar.xz"
        echo "Downloading: $url"
        
        wget -O llvm-mingw.tar.xz "$url"
        mkdir -p "${{ runner.tool_cache }}/llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}"
        tar -xf llvm-mingw.tar.xz --strip-components=1 -C "${{ runner.tool_cache }}/llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}"
        rm llvm-mingw.tar.xz
        
        echo "LLVM-Mingw installed to: ${{ runner.tool_cache }}/llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}"
    
    - name: Setup environment variables
      if: contains(matrix.target, 'mingw32')
      run: |
        LLVM_MINGW_DIR="${{ runner.tool_cache }}/llvm-mingw-${{ env.LLVM_MINGW_VERSION }}-${{ matrix.libc }}"
        echo "LLVM_MINGW_DIR=$LLVM_MINGW_DIR" >> $GITHUB_ENV
        echo "$LLVM_MINGW_DIR/bin" >> $GITHUB_PATH
        
        # 验证安装
        if [ -f "$LLVM_MINGW_DIR/bin/clang" ]; then
          echo "LLVM-Mingw installation verified"
          "$LLVM_MINGW_DIR/bin/clang" --version
        else
          echo "Error: LLVM-Mingw not properly installed"
          exit 1
        fi

    - name: Setup the musl toolchain
      if: contains(matrix.target, 'musl')
      uses: arceos-org/setup-musl@v1
      with:
        arch: ${{matrix.arch}}

    - name: Setup NDK toolchain
      if: matrix.libc == 'bionic'
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r23c
        add-to-path: false
        local-cache: true

    - name: Setup NDK toolchain variable
      if: matrix.libc == 'bionic'
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        if [ "${{matrix.libc}}" == "msvcrt" ] || [ "${{matrix.libc}}" == "ucrt" ]; then
          SYSTEM=Windows
          export CC="${{matrix.target}}-clang"
          export CXX="${{matrix.target}}-clang++"
        elif [ "${{matrix.libc}}" == "bionic" ]; then
          SYSTEM=Android
          export CC="${{matrix.target}}21-clang"
          export CXX="${{matrix.target}}21-clang++"
        else
          SYSTEM=Linux
          export CC="${{matrix.target}}-gcc"
          export CXX="${{matrix.target}}-g++"
        fi
      
        cmake -B "${{github.workspace}}/build" \
        -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" \
        -DPREFER_STATIC_LINKING=${{env.PREFER_STATIC_LINKING}} \
        -DCMAKE_SYSTEM_NAME=$SYSTEM

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.artifact_name}}-kptools
        path: |
          build/kptools*

#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      # Execute tests defined by the CMake configuration.
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
  build-emscripten:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Setup Emscripten toolchain
      uses: mymindstorm/setup-emsdk@v14

    - name: Configure CMake
      run: |
        emcmake cmake -B "${{github.workspace}}/build" \
        -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" \
        -DPREFER_STATIC_LINKING=${{env.PREFER_STATIC_LINKING}} \
        -DCMAKE_EXE_LINKER_FLAGS="-sFORCE_FILESYSTEM -sALLOW_MEMORY_GROWTH=1 -lproxyfs.js -lidbfs.js -sWASM=1 -sMODULARIZE=1 -sEXPORT_NAME=kptools -sEXPORTED_RUNTIME_METHODS=\"['FS','PROXYFS','out','err','ccall','cwrap','setValue','getValue','UTF8ToString','UTF8ArrayToString','stringToUTF8Array','FS_createPath','FS_createDataFile','removeRunDependency','addRunDependency','addFunction','safeSetTimeout','runtimeKeepalivePush','runtimeKeepalivePop','maybeExit','wasmMemory','callMain']\"" \

    - name: Build
      run: |
        cmake --build build

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: emscripten-wasm32-kptools
        path: |
          build/kptools*

  build-macos:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ x86_64, arm64 ]
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Configure CMake
      run: |
        cmake -B "${{github.workspace}}/build" \
        -DCMAKE_C_FLAGS="-arch ${{matrix.arch}}" \
        -DCMAKE_CXX_FLAGS="-arch ${{matrix.arch}}" \
        -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" \
        -DPREFER_STATIC_LINKING=${{env.PREFER_STATIC_LINKING}}
        
    - name: Build
      run: |
        cmake --build build

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.arch}}-macos-kptools
        path: |
          build/kptools*

    
    
